name: Disable Deployment for New Branches

on:
  push:
    branches:
      - '**'  # Trigger on all branches

jobs:
  disable-deploy:
    runs-on: ubuntu-latest

    steps:
      # Get the current branch name
      - name: Get current branch
        id: get-branch
        run: echo "branch_name=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      # Stop execution if branch is 'main'
      - name: Stop if branch is main
        if: env.branch_name == 'main'
        run: echo "This is the main branch. Skipping job." && exit 0

      # Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v2

      # Disable auto-deploy for new branches in vercel.json
      - name: Disable auto-deploy for new branch
        run: |
          BRANCH_NAME=${{ env.branch_name }}

          # Check if the branch is already in vercel.json
          if ! jq -e ".git.deploymentEnabled[\"$BRANCH_NAME\"]" vercel.json > /dev/null; then
            echo "Disabling auto-deploy for branch $BRANCH_NAME"

            # Add the new branch to vercel.json
            jq ".git.deploymentEnabled[\"$BRANCH_NAME\"] = false" vercel.json > tmp.json && mv tmp.json vercel.json

            # Commit the changes
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git add vercel.json

            if git diff --cached --quiet; then
              echo "No changes to commit."
            else
              git commit -m "Disable auto deploy for branch $BRANCH_NAME"
              git push
            fi
          else
            echo "Branch $BRANCH_NAME already exists in vercel.json, skipping."
          fi
